---
alwaysApply: false
---

This rule documents the Interview Scheduling and Acceptance flow end-to-end with database references.

## Overview

- Purpose: Allow a host to schedule a practice interview, optionally invite a guest, and allow the guest to accept the invite.
- Scope: Frontend scheduling UI, invite acceptance UI, backend APIs for room creation/update, Supabase reads and realtime.

## Frontend

- Entry points:
  - Scheduling page: [`apps/frontend/src/pages/InterviewScheduling.tsx`](mdc:apps/frontend/src/pages/InterviewScheduling.tsx)
  - Scheduling hook: [`apps/frontend/src/hooks/useInterviewScheduling.ts`](mdc:apps/frontend/src/hooks/useInterviewScheduling.ts)
  - Invite acceptance page: [`apps/frontend/src/components/interviewScheduling/InviteAcceptPage.tsx`](mdc:apps/frontend/src/components/interviewScheduling/InviteAcceptPage.tsx)
  - API helpers: [`apps/frontend/src/lib/api.ts`](mdc:apps/frontend/src/lib/api.ts)
  - Supabase data helpers and realtime: [`apps/frontend/src/supabase/data.tsx`](mdc:apps/frontend/src/supabase/data.tsx)

- Actions:
  - Create room: `createRoom({ hostId, datetimeUtc, private })` → POST `/api/practice-room/create`.
  - Accept invite: `setRoomGuest({ roomId, guestId })` → POST `/api/practice-room/update`.
  - Lists and detail reads: `fetchAllRooms()`, `fetchRoomsForUser(userId)`, `fetchRoomWithProfiles(roomId)`.
  - Realtime: `subscribeToAllPracticeRooms()` for lists; `subscribeToPracticeRoomByRoomId({ roomId })` for detail pages.

- Auth: Axios interceptor injects `Authorization: Bearer <supabase.access_token>` on all API calls.

## Backend

- Endpoints (mounted in `app.ts` under `/api`):
  - POST `/practice-room/create` → `createPracticeRoom(...)` service
  - POST `/practice-room/update` → `updatePracticeRoomWithReturn(...)` repository
  - Middleware: `requireSupabaseUser` validates token and exposes `req.supabaseAsUser`.

- Services/Repositories:
  - Service: [`apps/backend/services/practiceRoom.ts`](mdc:apps/backend/services/practiceRoom.ts)
    - `createPracticeRoom(supabaseAuthenticated, { hostId, datetimeUtc, private })`:
      - Uses repository to insert `practice_rooms` row.
      - Immediately creates initial `practice_rounds` row with `round_number = 1` via `createRoundWithReturn`.
  - Repository: [`apps/backend/repositories/practiceRoom.ts`](mdc:apps/backend/repositories/practiceRoom.ts)
    - `createRoomWithReturn`
    - `updatePracticeRoomWithReturn`
  - Repository: [`apps/backend/repositories/practiceRound.ts`](mdc:apps/backend/repositories/practiceRound.ts)
    - `createRoundWithReturn` (called after room creation)

## Database

- Tables and relevant columns:
  - `practice_rooms`
    - `id` (uuid PK)
    - `host_id` (uuid, required)
    - `guest_id` (uuid, nullable)
    - `stage` (text)
    - `room_url` (text, nullable)
    - `private` (boolean)
    - `created_at` (timestamptz)
    - `datetime_utc` (timestamptz)
  - `practice_rounds`
    - `id` (uuid PK)
    - `room_id` (uuid, required)
    - `round_number` (int, required)
    - `candidate_id` (uuid, nullable)
    - `case_brief_id` (uuid, nullable)
    - `transcript` (jsonb, nullable)
    - `assessment` (jsonb, nullable)
    - `created_at` (timestamptz)
  - `profiles` (used for joined host/guest info on reads)

- Mappers (backend typing): [`apps/backend/types/index.ts`](mdc:apps/backend/types/index.ts)
  - `PracticeRoomMapper.insertToDb`, `PracticeRoomMapper.updateToDb`
  - `PracticeRoundMapper.insertToDb`

## Realtime

- Use `subscribeToAllPracticeRooms` to drive room lists with live updates.
- Use `subscribeToPracticeRoomByRoomId({ roomId })` to update a single room view after host/guest changes.

## Error handling & UX notes

- If `guest_id` is already set, acceptance should be gated in UI.
- On missing `datetimeUtc` or invalid date, surface API error to user.
- Invite acceptance page loads current room via `fetchRoomWithProfiles(roomId)`; if not found, show a friendly error.

